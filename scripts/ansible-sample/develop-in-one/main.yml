# coding:utf-8

- hosts: all

  handlers:

    - name: iptablesの再起動
      service: name=iptables state=restarted

  tasks:

    - name: ロケール設定
      shell: 'sudo cp -p  /usr/share/zoneinfo/Japan /etc/localtime'

    - name: yumリポジトリにEPELを加える
      yum: name=epel-release state=installed

    - name: すべてのyumパッケージアップデート
      yum: name=* state=latest

    - name: libselinuxインストール
      yum: name=libselinux-python disable_gpg_check=no state=installed

    - name: byobuインストール
      yum: name=byobu disable_gpg_check=no state=installed

    - name: wgetインストール
      yum: name=wget disable_gpg_check=no state=installed

    - name: pythonでDockerを扱うためのdocker-pyインストール
      yum: name=python-docker-py disable_gpg_check=no state=installed

    - name: ファイアーウォールiptablesを設定
      copy:
        src: ./resources/iptables
        dest: /etc/sysconfig/iptables
        backup: yes
      notify: restart iptables

    - name: dockerインストール
      yum: name=docker-io disable_gpg_check=no state=installed

    - name: dockerサーバ起動
      service: name=docker enabled=yes state=started

    - name: Jenkinsのデータディレクトリ作成
      file: path=/var/local/jenkins state=directory owner=root group=root mode=777

    # Jeknins install

    - name: Jenkins用JDK1.8インストール
      yum: name=java-1.8.0-openjdk-devel state=installed

    - name: Jenkins用yumリポジトリ追加
      shell: 'curl http://pkg.jenkins-ci.org/redhat/jenkins.repo > /etc/yum.repos.d/jenkins.repo'

    - name: Jenkins用yumリポジトリのキーファイルインストール
      shell: 'rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key'

    - name: Jenkinsインストール
      yum: name=jenkins state=installed

    - name: Jenkins起動設定ファイルのデータディレクトリ部分を変更
      lineinfile:
        dest: '/etc/sysconfig/jenkins'
        state: present
        backrefs: yes
        regexp: '^JENKINS_HOME=.*'
        line: 'JENKINS_HOME="/var/local/jenkins"'

    - name: Jenkins起動設定ファイルのURI部分を変更
      lineinfile:
        dest: '/etc/sysconfig/jenkins'
        state: present
        backrefs: yes
        regexp: '^JENKINS_ARGS=.*'
        line: 'JENKINS_ARGS="--prefix=/ci"'

    - name: ユーザのグループdocker作成
      group: name=docker state=present

    - name: ユーザjenkinsをグループdockerに加える
      user: name=jenkins groups=docker append=yes

    - name: Jenkinsをサービスに登録＆起動
      service: name=jenkins enabled=yes state=started

    # sonarqube insstall

    - name: PostgreSQLのセットアップするタスクを実行
      include: tasks/sonarqube_db.yml

    - name: SonarQubeのセットアップするタスクを実行
      include: tasks/sonarqube_install.yml

    - name: Nexusリポジトリサーバのデータ用ディレクトリを作成
      file: path=/var/local/nexus-data state=directory owner=root group=root mode=777

    - name: NexusリポジトリサーバのDockerコンテナを起動
      docker:
        image: sonatype/nexus
        name: nexus
        ports: 8081:8081
        volumes: /var/local/nexus-data:/sonatype-work
        detach: yes
        tty: yes
        restart_policy: unless-stopped
        state: running

    - name: 自らが配信元になるyumサーバのセットアップタスクを実行
      include: tasks/yum-repository.yml

    - name: nginxのセットアップ用タスクを実行
      include: tasks/nginx-setting.yml

    # 苦肉の策。
    # なぜかsonarqubeが初回起動に失敗する、DockerがIptables絡みでrun不能になる、など
    # 色々問題あるので、docker再起動した上で、コンテナ復元する。

    - name: dockerサーバ再起動
      service: name=docker state=restarted

    - name: 再起動時に残っているすべてのDockerコンテナを再起動
      shell: 'docker ps -aq | xargs docker restart'

    # Startup scripts when restarted.

    - name: ファイル /etc/rc.local に再起動時のスタートアップスクリプト設定を追加
      lineinfile: >
        dest=/etc/rc.d/rc.local
        line='/var/local/startup/startup.sh >> /var/log/startup_scripts.log 2>&1'

    - name: スタートアップ時に使用するディレクトリを作成
      file: path=/var/local/startup/ state=directory owner=root group=root mode=777

    - name: スタートアップ時用スクリプトを配置
      copy:
        src: ./resources/startup.sh
        dest: /var/local/startup/startup.sh
        owner: root
        group: root
        mode: 0755
