#!/bin/bash

# Dockeをセットアップするスクリプト群。
#
# 対象:CentOS7
# user:root
# 作業dir:任意
# 
# ※極力楽するので、本当は良くないがyumに依存したり、いろいろ筋の悪いことをしているのは承知の上。

# この環境用の設定
export http_proxy=proxy.nintendo.co.jp:8080
export HTTP_PROXY=${http_proxy}
export ftp_proxy=${http_proxy}
export FTP_PROXY=${http_proxy}
export https_proxy=${http_proxy}
export HTTPS_PROXY=${http_proxy}

# Ruby最新インストール(リポジトリ任せ)
yum update -y 
yum install -y ruby ruby-devel git svn gcc openssl-devel zlib-devel gcc-c++ autoconf automake

# Chefインストール(ユーザはroot前提。一般ユーザならsudo付けて)
# curl http://www.opscode.com/chef/install.sh | bash

# knife-solo, berkshelf インストール
gem install chef bundler
gem install knife-solo --no-ri --no-rdoc -V
gem install berkshelf --no-ri --no-rdoc -V

# カスタマイズ作業(Chefに移せるなら移す)
# k-miura User add
# sudo usermod -G wheel k-miura
# あとロケール設定も。

# Chef実行（任意）
# 対話により「やるかやらないか」を決めさせる。
while true ; do
    echo -n "Execute Chef recipe ? [y/n] :"
    read ANS

    if [ "${ANS}" = 'y' -o "${ANS}" = 'yes' ]; then
        break
    elif [ "${ANS}" = 'n' -o "${ANS}" = 'no' ]; then
        echo "Server setup finished! (no Chef recipient.)"
        exit 1
    else
        continue 1
    fi
done


# Chefによるサーバのセットアップ
cd ./chef-repo

# Chef用のプロキシー設定
export http_proxy=http://proxy.nintendo.co.jp:8080
export HTTP_PROXY=${http_proxy}
export ftp_proxy=${http_proxy}
export FTP_PROXY=${http_proxy}
export https_proxy=${http_proxy}
export HTTPS_PROXY=${http_proxy}

# solo.rb の書き換え
bash ./solo.rb.template.bsh > ./solo.rb

# Barksfile読み込ませ
berks vendor cookbooks

# レシピ実行！
chef-solo -c solo.rb -j nodes/localhost.json
# このレシピ適用は失敗した。直後 yum update 後もう一度流すと成功した。
# どうやら、「EPELなどとの整合性が取れていない状態」になるかもしれなく、updateで整合を取ったことにより行けた模様。

##----------------------

echo "Server setup finished!"
